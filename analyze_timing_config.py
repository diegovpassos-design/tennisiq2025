"""
AN√ÅLISE: Por que oportunidades s√£o enviadas com 6 horas de anteced√™ncia
Identifica onde est√° configurado este filtro e como alterar para 24 horas
"""

import sys
import os
sys.path.append('backend')

def analyze_timing_configuration():
    print("üïê AN√ÅLISE DA CONFIGURA√á√ÉO DE TIMING")
    print("=" * 60)
    
    print("\nüìã COMO FUNCIONA ATUALMENTE:")
    print("-" * 40)
    
    print("\n1Ô∏è‚É£ SCAN DE OPORTUNIDADES:")
    print("‚Ä¢ monitoring_service.py linha 109:")
    print("  hours_ahead=72  # Busca jogos at√© 72h no futuro")
    print("‚Ä¢ prelive_scanner.py linha 68:")
    print("  def get_upcoming_events(self, hours_ahead: int = 48)")
    print("‚Ä¢ Padr√£o: 48h, mas service for√ßa 72h")
    
    print("\n2Ô∏è‚É£ SALVAMENTO NO BANCO:")
    print("‚Ä¢ Todas as oportunidades s√£o salvas")
    print("‚Ä¢ N√£o h√° filtro de tempo no salvamento")
    
    print("\n3Ô∏è‚É£ ENVIO VIA TELEGRAM:")
    print("‚Ä¢ monitoring_service.py linha 125:")
    print("  self._notify_best_opportunities(opportunities)")
    print("‚Ä¢ Envia TODAS as oportunidades encontradas no scan")
    print("‚Ä¢ N√ÉO h√° filtro adicional de tempo")
    
    print("\n4Ô∏è‚É£ MONITORAMENTO (linha diferente):")
    print("‚Ä¢ monitoring_service.py linha 144:")
    print("  active_opps = self.db.get_active_opportunities(min_hours_ahead=0.5)")
    print("‚Ä¢ Este √© para MONITORAR mudan√ßas, n√£o para ENVIAR")
    
    print("\n" + "=" * 60)
    print("ü§î ONDE EST√Å O FILTRO DE 6 HORAS?")
    print("=" * 60)
    
    print("\n‚ùå N√ÉO ENCONTREI filtro espec√≠fico de 6 horas no c√≥digo!")
    print("\nüí° POSS√çVEIS CAUSAS:")
    
    print("\n1Ô∏è‚É£ API B365 limita√ß√£o:")
    print("‚Ä¢ A API pode estar retornando apenas jogos pr√≥ximos")
    print("‚Ä¢ Mesmo pedindo 72h, pode retornar s√≥ 6h")
    
    print("\n2Ô∏è‚É£ Filtro no banco de dados:")
    print("‚Ä¢ database.py get_active_opportunities() usa min_hours_ahead=1 padr√£o")
    print("‚Ä¢ Mas isso n√£o √© usado no envio inicial")
    
    print("\n3Ô∏è‚É£ L√≥gica de 'j√° enviado':")
    print("‚Ä¢ is_opportunity_already_sent() pode estar bloqueando")
    print("‚Ä¢ Jogos distantes podem j√° ter sido 'enviados' antes")
    
    print("\n4Ô∏è‚É£ Configura√ß√£o externa:")
    print("‚Ä¢ Alguma vari√°vel de ambiente ou config.json")
    print("‚Ä¢ Pode ter filtro n√£o vis√≠vel no c√≥digo")
    
    print("\n" + "=" * 60)
    print("‚úÖ COMO GARANTIR 24 HORAS:")
    print("=" * 60)
    
    print("\nüîß OP√á√ÉO 1 - For√ßar hours_ahead:")
    print("‚Ä¢ monitoring_service.py linha 109:")
    print("  hours_ahead=72  ‚Üí  hours_ahead=48  # Manter 48h √© suficiente")
    print("‚Ä¢ prelive_scanner.py linha 68:")  
    print("  hours_ahead: int = 48  ‚Üí  hours_ahead: int = 48  # J√° est√° ok")
    
    print("\nüîß OP√á√ÉO 2 - Adicionar filtro de tempo m√≠nimo:")
    print("‚Ä¢ Na _notify_best_opportunities() adicionar:")
    print("  # S√≥ envia jogos com mais de X horas")
    print("  min_hours_before = 24")
    print("  filtered_opps = [opp for opp in opportunities")
    print("                   if hours_until_game(opp) >= min_hours_before]")
    
    print("\nüîß OP√á√ÉO 3 - Filtrar na query do banco:")
    print("‚Ä¢ database.py get_active_opportunities():")
    print("  min_hours_ahead: int = 1  ‚Üí  min_hours_ahead: int = 24")
    print("‚Ä¢ Mas isso afeta monitoramento tamb√©m!")
    
    print("\nüîß OP√á√ÉO 4 - Novo m√©todo espec√≠fico:")
    print("‚Ä¢ Criar get_opportunities_for_notification(min_hours=24)")
    print("‚Ä¢ Usar apenas no envio inicial")
    print("‚Ä¢ Manter get_active_opportunities() para monitoramento")
    
    print("\n" + "=" * 60)
    print("üéØ RECOMENDA√á√ÉO:")
    print("=" * 60)
    
    print("\nüèÜ IMPLEMENTAR OP√á√ÉO 4 (mais limpa):")
    print("1. Criar novo m√©todo no database.py")
    print("2. Filtrar por tempo m√≠nimo antes do jogo")
    print("3. Usar apenas no _notify_best_opportunities()")
    print("4. N√£o afetar monitoramento de linha")
    
    print("\nüìù C√ìDIGO SUGERIDO:")
    print("-" * 30)
    print("# database.py")
    print("def get_opportunities_for_notification(self, min_hours_ahead: int = 24):")
    print("    cutoff_time = (datetime.utcnow() + timedelta(hours=min_hours_ahead))")
    print("    # SELECT onde start_utc > cutoff_time")
    print("")
    print("# monitoring_service.py") 
    print("def _notify_best_opportunities(self, opportunities):")
    print("    # Filtra apenas jogos com 24h+ de anteced√™ncia")
    print("    far_opps = self.db.get_opportunities_for_notification(24)")
    print("    # Intersecta com opportunities encontradas")
    print("    # Envia apenas essas")
    
    print("\n‚ö†Ô∏è IMPORTANTE:")
    print("‚Ä¢ N√£o alterar get_active_opportunities() atual")
    print("‚Ä¢ Monitoramento precisa continuar funcionando")
    print("‚Ä¢ Apenas filtrar no ENVIO inicial")
    
    print(f"\nüîç QUER QUE EU IMPLEMENTE ESTA SOLU√á√ÉO?")
    print("Adicionaria o filtro de 24h sem quebrar nada existente")

if __name__ == "__main__":
    analyze_timing_configuration()
