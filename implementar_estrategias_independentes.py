#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üîß IMPLEMENTA√á√ÉO: ESTRAT√âGIAS INDEPENDENTES
============================================================
Modifica o sele√ß√£o_final.py para que cada estrat√©gia opere independentemente
"""

import os
import sys

def aplicar_correcao_estrategias_independentes():
    """Aplica corre√ß√£o para estrat√©gias independentes"""
    
    print("üîß === CORRE√á√ÉO: ESTRAT√âGIAS INDEPENDENTES ===")
    print("üéØ Modificando sele√ß√£o_final.py para separar estrat√©gias")
    
    # Definir crit√©rios independentes para cada estrat√©gia
    criterios_independentes = '''
# üéØ CRIT√âRIOS INDEPENDENTES POR ESTRAT√âGIA
# ============================================================

# üöÄ ESTRAT√âGIA ALAVANCAGEM - Para EVs muito altos (independente)
CRITERIOS_ALAVANCAGEM = {
    'EV_MINIMO': 0.5,             # EVs altos (0.5+)
    'EV_MAXIMO': 50.0,            # Sem limite superior
    'MOMENTUM_SCORE_MINIMO': 40,  # MS ‚â• 40% (RELAXADO)
    'WIN_1ST_SERVE_MINIMO': 50,   # W1S ‚â• 50% (RELAXADO)
    'DOUBLE_FAULTS_MAXIMO': 8,    # DF ‚â§ 8 (RELAXADO)
    'PRIORIDADE_MINIMA': 2,       # Prioridade ‚â• 2 (RELAXADO)
    'NOME': 'ALAVANCAGEM'
}

# üß† ESTRAT√âGIA VANTAGEM MENTAL - Para situa√ß√µes psicol√≥gicas (independente)
CRITERIOS_VANTAGEM_MENTAL = {
    'EV_MINIMO': 0.15,            # EV moderado
    'EV_MAXIMO': 2.0,             # Limite moderado
    'MOMENTUM_SCORE_MINIMO': 60,  # MS ‚â• 60% (importante para mental)
    'WIN_1ST_SERVE_MINIMO': 60,   # W1S ‚â• 60% (importante para mental)
    'DOUBLE_FAULTS_MAXIMO': 4,    # DF ‚â§ 4 (rigoroso para mental)
    'PRIORIDADE_MINIMA': 3,       # Prioridade ‚â• 3
    'NOME': 'VANTAGEM_MENTAL'
}

# üîÑ ESTRAT√âGIA INVERTIDA - Para fadiga e 3¬∫ sets (independente)
CRITERIOS_INVERTIDOS = {
    'EV_MINIMO': 0.1,             # EV baixo (situa√ß√µes especiais)
    'EV_MAXIMO': 3.0,             # Permite EVs altos
    'MOMENTUM_SCORE_MINIMO': 45,  # MS ‚â• 45% (MUITO RELAXADO)
    'WIN_1ST_SERVE_MINIMO': 45,   # W1S ‚â• 45% (MUITO RELAXADO)
    'DOUBLE_FAULTS_MAXIMO': 6,    # DF ‚â§ 6 (relaxado)
    'PRIORIDADE_MINIMA': 2,       # Prioridade ‚â• 2
    'NOME': 'INVERTIDA'
}

def avaliar_estrategia_independente(dados_jogador, partida, criterios):
    """Avalia UMA estrat√©gia espec√≠fica independentemente das outras"""
    
    filtros_aprovados = []
    filtros_rejeitados = []
    estrategia_nome = criterios['NOME']
    
    # Filtro EV
    if criterios['EV_MINIMO'] <= dados_jogador['ev'] <= criterios['EV_MAXIMO']:
        filtros_aprovados.append(f"EV: {dados_jogador['ev']:.3f} ‚úÖ")
    else:
        filtros_rejeitados.append(f"EV: {dados_jogador['ev']:.3f} ‚ùå")
    
    # Filtro Momentum Score
    if dados_jogador['momentum_score'] >= criterios['MOMENTUM_SCORE_MINIMO']:
        filtros_aprovados.append(f"MS: {dados_jogador['momentum_score']:.1f}% ‚úÖ")
    else:
        filtros_rejeitados.append(f"MS: {dados_jogador['momentum_score']:.1f}% ‚ùå")
    
    # Filtro Double Faults
    try:
        df_value = int(dados_jogador['double_faults']) if dados_jogador['double_faults'] else 0
        if 0 <= df_value <= criterios['DOUBLE_FAULTS_MAXIMO']:
            filtros_aprovados.append(f"DF: {df_value} ‚úÖ")
        else:
            filtros_rejeitados.append(f"DF: {df_value} ‚ùå")
    except (ValueError, TypeError):
        filtros_rejeitados.append(f"DF: inv√°lido ‚ùå")
    
    # Filtro Win 1st Serve
    try:
        w1s_value = float(dados_jogador['win_1st_serve']) if dados_jogador['win_1st_serve'] else 0
        if w1s_value >= criterios['WIN_1ST_SERVE_MINIMO']:
            filtros_aprovados.append(f"W1S: {w1s_value}% ‚úÖ")
        else:
            filtros_rejeitados.append(f"W1S: {w1s_value}% ‚ùå")
    except (ValueError, TypeError):
        filtros_rejeitados.append(f"W1S: inv√°lido ‚ùå")
    
    # Estrat√©gia aprovada se TODOS os filtros passaram
    aprovada = len(filtros_rejeitados) == 0
    
    if aprovada:
        print(f"   ‚úÖ {estrategia_nome}: {dados_jogador.get('nome', 'N/A')} APROVADO!")
        print(f"      {', '.join(filtros_aprovados)}")
    else:
        print(f"   ‚ùå {estrategia_nome}: {dados_jogador.get('nome', 'N/A')} rejeitado")
        print(f"      {', '.join(filtros_rejeitados[:2])}...")
    
    return aprovada, estrategia_nome, filtros_aprovados
'''
    
    print("‚úÖ Crit√©rios independentes definidos:")
    print("   üöÄ ALAVANCAGEM: EV ‚â• 0.5, MS ‚â• 40%, W1S ‚â• 50% (RELAXADO)")
    print("   üß† VANTAGEM MENTAL: EV ‚â• 0.15, MS ‚â• 60%, W1S ‚â• 60% (RIGOROSO)")  
    print("   üîÑ INVERTIDA: EV ‚â• 0.1, MS ‚â• 45%, W1S ‚â• 45% (MUITO RELAXADO)")
    
    return criterios_independentes

def criar_funcao_processamento_independente():
    """Cria fun√ß√£o que processa cada estrat√©gia independentemente"""
    
    funcao_processamento = '''
def processar_estrategias_independentes(partidas_timing):
    """Processa CADA estrat√©gia independentemente (uma n√£o interfere na outra)"""
    
    oportunidades_por_estrategia = {
        'ALAVANCAGEM': [],
        'VANTAGEM_MENTAL': [],
        'INVERTIDA': []
    }
    
    todas_estrategias = [CRITERIOS_ALAVANCAGEM, CRITERIOS_VANTAGEM_MENTAL, CRITERIOS_INVERTIDOS]
    
    print("\\nüéØ === PROCESSAMENTO INDEPENDENTE DE ESTRAT√âGIAS ===")
    
    for partida in partidas_timing:
        print(f"\\nüîç {partida['jogador1']} vs {partida['jogador2']}")
        
        # Para cada jogador na partida
        jogadores_dados = obter_dados_jogadores(partida)  # Fun√ß√£o existente
        
        for dados_jogador in jogadores_dados:
            # Testar CADA estrat√©gia independentemente
            for criterios in todas_estrategias:
                aprovada, estrategia_nome, filtros_aprovados = avaliar_estrategia_independente(
                    dados_jogador, partida, criterios
                )
                
                if aprovada:
                    oportunidade = {
                        'partida_id': partida['event_id'],
                        'liga': partida['liga'],
                        'jogador': dados_jogador['nome'],
                        'oponente': dados_jogador['oponente'],
                        'placar': partida['placar'],
                        'fase_timing': partida['fase'],
                        'prioridade_timing': partida['prioridade'],
                        'tipo': dados_jogador['tipo'],
                        'ev': dados_jogador['ev'],
                        'momentum': dados_jogador['momentum_score'],
                        'double_faults': dados_jogador['double_faults'],
                        'win_1st_serve': dados_jogador['win_1st_serve'],
                        'estrategia': estrategia_nome,
                        'filtros_aprovados': filtros_aprovados
                    }
                    
                    oportunidades_por_estrategia[estrategia_nome].append(oportunidade)
    
    # Consolidar todas as oportunidades
    todas_oportunidades = []
    for estrategia, oportunidades in oportunidades_por_estrategia.items():
        todas_oportunidades.extend(oportunidades)
        if oportunidades:
            print(f"\\n‚úÖ {estrategia}: {len(oportunidades)} oportunidades encontradas")
    
    print(f"\\nüéØ TOTAL: {len(todas_oportunidades)} oportunidades independentes")
    
    return todas_oportunidades
'''
    
    return funcao_processamento

def main():
    """Fun√ß√£o principal"""
    print("üîß === IMPLEMENTA√á√ÉO: ESTRAT√âGIAS INDEPENDENTES ===")
    print("üìÖ Criando sistema para corrigir sele√ß√£o_final.py")
    
    # 1. Criar crit√©rios independentes
    criterios = aplicar_correcao_estrategias_independentes()
    
    # 2. Criar fun√ß√£o de processamento independente  
    funcao = criar_funcao_processamento_independente()
    
    print("\\n‚úÖ === SISTEMA INDEPENDENTE CRIADO! ===")
    print("\\nüéØ COMO FUNCIONA:")
    print("   1. Cada estrat√©gia tem seus pr√≥prios crit√©rios")
    print("   2. Uma estrat√©gia rejeitada N√ÉO afeta as outras")
    print("   3. ALAVANCAGEM pode funcionar mesmo com MS baixo")
    print("   4. V√°rias estrat√©gias podem aprovar a mesma partida")
    
    print("\\nüìã PR√ìXIMOS PASSOS:")
    print("   1. Integrar este c√≥digo no sele√ß√£o_final.py")
    print("   2. Substituir fun√ß√£o atual por processamento independente")
    print("   3. Testar para verificar se alavancagem funciona")
    
    print("\\nüöÄ RESULTADO ESPERADO:")
    print("   ‚Ä¢ Sinais de alavancagem voltando a funcionar")
    print("   ‚Ä¢ Partidas com EV alto (>0.5) sendo aprovadas")
    print("   ‚Ä¢ Crit√©rios relaxados para MS/W1S na alavancagem")
    
    return True

if __name__ == "__main__":
    main()
