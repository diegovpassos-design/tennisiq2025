#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
TESTE DIRETO DA ESTRAT√âGIA DE ALAVANCAGEM
=========================================
Verifica√ß√£o se a estrat√©gia est√° funcionando ap√≥s deploy
"""

import sys
import os

# Adicionar ao path
PROJECT_ROOT = os.path.dirname(__file__)
sys.path.append(os.path.join(PROJECT_ROOT, 'backend'))

def testar_detector_alavancagem():
    """Testa se o detector de alavancagem est√° funcionando"""
    
    print("üîç TESTE DIRETO DA ESTRAT√âGIA DE ALAVANCAGEM")
    print("=" * 50)
    
    try:
        # Importar detector
        from backend.core.detector_alavancagem import DetectorAlavancagem
        
        detector = DetectorAlavancagem()
        
        print(f"‚úÖ Detector importado com sucesso")
        print(f"üìä Crit√©rios atuais:")
        print(f"   ‚Ä¢ Odd m√≠nima: {detector.odd_minima}")
        print(f"   ‚Ä¢ Odd m√°xima: {detector.odd_maxima}")
        print(f"   ‚Ä¢ Momentum m√≠nimo: {detector.momentum_minimo}%")
        
        # Teste com cen√°rio v√°lido
        oportunidade_teste = {
            'jogador': 'Teste Player',
            'oponente': 'Oponente Teste',
            'tipo': 'HOME',
            'momentum_score': 65,
            'ev': 1.0
        }
        
        placar_teste = "6-4,1-0"  # Ganhou primeiro set, liderando segundo
        odds_teste = {'jogador1_odd': 1.30, 'jogador2_odd': 3.50}
        
        print(f"\nüß™ TESTANDO CEN√ÅRIO V√ÅLIDO:")
        print(f"   ‚Ä¢ Jogador: {oportunidade_teste['jogador']}")
        print(f"   ‚Ä¢ Placar: {placar_teste}")
        print(f"   ‚Ä¢ Odd: {odds_teste['jogador1_odd']}")
        print(f"   ‚Ä¢ Momentum: {oportunidade_teste['momentum_score']}%")
        
        resultado = detector.analisar_oportunidade_alavancagem(
            oportunidade_teste, placar_teste, odds_teste
        )
        
        print(f"\nüìä RESULTADO:")
        if resultado['alavancagem_aprovada']:
            print(f"   ‚úÖ APROVADO!")
            print(f"   üìã Justificativa: {resultado.get('justificativa', 'N/A')}")
        else:
            print(f"   ‚ùå REJEITADO: {resultado.get('motivo', 'N/A')}")
        
        return resultado['alavancagem_aprovada']
        
    except Exception as e:
        print(f"‚ùå Erro ao testar detector: {e}")
        return False

def testar_bot_alavancagem():
    """Testa se o bot principal usa alavancagem"""
    
    print(f"\nüîç TESTE DO BOT PRINCIPAL")
    print("=" * 30)
    
    try:
        from backend.core.bot import TennisIQBot
        
        print(f"‚úÖ Bot importado com sucesso")
        
        # Verificar se tem detector de alavancagem
        bot = TennisIQBot()
        
        if hasattr(bot, 'detector_alavancagem'):
            print(f"‚úÖ Bot tem detector de alavancagem")
            
            # Verificar crit√©rios do detector
            detector = bot.detector_alavancagem
            print(f"üìä Crit√©rios do detector no bot:")
            print(f"   ‚Ä¢ Odd m√≠nima: {detector.odd_minima}")
            print(f"   ‚Ä¢ Odd m√°xima: {detector.odd_maxima}")
            print(f"   ‚Ä¢ Momentum m√≠nimo: {detector.momentum_minimo}%")
            
            # Verificar se tem fun√ß√£o de an√°lise
            if hasattr(bot, 'analisar_alavancagem'):
                print(f"‚úÖ Bot tem fun√ß√£o analisar_alavancagem")
                return True
            else:
                print(f"‚ùå Bot N√ÉO tem fun√ß√£o analisar_alavancagem")
                return False
        else:
            print(f"‚ùå Bot N√ÉO tem detector de alavancagem")
            return False
        
    except Exception as e:
        print(f"‚ùå Erro ao testar bot: {e}")
        return False

def verificar_logs_railway():
    """Sugere verifica√ß√µes para o Railway"""
    
    print(f"\nüîç VERIFICA√á√ïES SUGERIDAS PARA RAILWAY")
    print("=" * 40)
    
    print(f"1Ô∏è‚É£ VERIFICAR DEPLOY:")
    print(f"   ‚Ä¢ O commit 00e0f76 foi deployado?")
    print(f"   ‚Ä¢ As mudan√ßas est√£o na inst√¢ncia ativa?")
    print(f"   ‚Ä¢ Houve restart ap√≥s o deploy?")
    
    print(f"\n2Ô∏è‚É£ VERIFICAR LOGS:")
    print(f"   ‚Ä¢ Procurar por: 'üöÄ ALAVANCAGEM:'")
    print(f"   ‚Ä¢ Procurar por: 'Analisando oportunidade'")
    print(f"   ‚Ä¢ Verificar se detector est√° sendo usado")
    
    print(f"\n3Ô∏è‚É£ VERIFICAR TIMING:")
    print(f"   ‚Ä¢ Estrat√©gia s√≥ roda em partidas espec√≠ficas")
    print(f"   ‚Ä¢ Precisa ter primeiro set terminado")
    print(f"   ‚Ä¢ Precisa estar no segundo set")
    
    print(f"\n4Ô∏è‚É£ LOGS DE DEBUG:")
    print(f"   ‚Ä¢ Ativar n√≠vel DEBUG temporariamente")
    print(f"   ‚Ä¢ Verificar se oportunidades chegam ao detector")
    print(f"   ‚Ä¢ Monitorar ciclos espec√≠ficos")

def executar_verificacao_completa():
    """Executa verifica√ß√£o completa"""
    
    print("üéØ VERIFICA√á√ÉO COMPLETA DA ESTRAT√âGIA DE ALAVANCAGEM")
    print("=" * 60)
    
    # Teste 1: Detector direto
    detector_ok = testar_detector_alavancagem()
    
    # Teste 2: Bot principal
    bot_ok = testar_bot_alavancagem()
    
    # Sugest√µes para Railway
    verificar_logs_railway()
    
    # Conclus√£o
    print(f"\nüéØ CONCLUS√ÉO:")
    
    if detector_ok and bot_ok:
        print(f"‚úÖ SISTEMA LOCAL FUNCIONANDO CORRETAMENTE")
        print(f"üîç PROBLEMA PROV√ÅVEL: Deploy n√£o efetivado ou logs suprimidos")
        print(f"üìù A√á√ÉO: Verificar se Railway aplicou as mudan√ßas")
    elif detector_ok and not bot_ok:
        print(f"‚ö†Ô∏è DETECTOR OK, MAS BOT COM PROBLEMA")
        print(f"üìù A√á√ÉO: Verificar integra√ß√£o no bot principal")
    else:
        print(f"‚ùå PROBLEMA NO DETECTOR")
        print(f"üìù A√á√ÉO: Revisar implementa√ß√£o do detector")
    
    return detector_ok and bot_ok

if __name__ == "__main__":
    executar_verificacao_completa()
