#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
VERIFICA√á√ÉO PR√â-DEPLOY: RAILWAY
==============================
Verifica se todos os arquivos est√£o prontos para deploy no Railway
"""

import os
import sys

def verificar_deploy_railway():
    """
    Verifica se est√° tudo pronto para deploy no Railway
    """
    print("üöÄ VERIFICA√á√ÉO PR√â-DEPLOY: RAILWAY")
    print("=" * 50)
    print()
    
    arquivos_obrigatorios = [
        'requirements.txt',
        'Procfile', 
        'railway.json',
        'run_bot.py',
        'run_dashboard.py',
        'backend/core/bot.py',
        'backend/core/detector_alavancagem.py',
        'backend/core/detector_vantagem_mental.py'
    ]
    
    print("üìã Verificando arquivos obrigat√≥rios:")
    todos_presentes = True
    
    for arquivo in arquivos_obrigatorios:
        if os.path.exists(arquivo):
            print(f"   ‚úÖ {arquivo}")
        else:
            print(f"   ‚ùå {arquivo} - N√ÉO ENCONTRADO!")
            todos_presentes = False
    
    print()
    
    # Verificar se n√£o h√° erros de sintaxe nos arquivos principais
    print("üîç Verificando sintaxe dos arquivos Python:")
    
    arquivos_python = [
        'run_bot.py',
        'run_dashboard.py', 
        'backend/core/bot.py',
        'backend/core/detector_alavancagem.py'
    ]
    
    for arquivo in arquivos_python:
        try:
            with open(arquivo, 'r', encoding='utf-8') as f:
                compile(f.read(), arquivo, 'exec')
            print(f"   ‚úÖ {arquivo} - Sintaxe OK")
        except SyntaxError as e:
            print(f"   ‚ùå {arquivo} - ERRO DE SINTAXE: {e}")
            todos_presentes = False
        except Exception as e:
            print(f"   ‚ö†Ô∏è {arquivo} - Aviso: {e}")
    
    print()
    
    # Verificar configura√ß√µes do Railway
    print("‚öôÔ∏è Verificando configura√ß√µes do Railway:")
    
    # Procfile
    try:
        with open('Procfile', 'r') as f:
            procfile_content = f.read()
        if 'worker: python run_bot.py' in procfile_content:
            print("   ‚úÖ Procfile - worker configurado corretamente")
        else:
            print("   ‚ùå Procfile - worker n√£o encontrado")
            todos_presentes = False
            
        if 'web: python run_dashboard.py' in procfile_content:
            print("   ‚úÖ Procfile - web configurado corretamente")  
        else:
            print("   ‚ö†Ô∏è Procfile - web n√£o encontrado (opcional)")
    except Exception as e:
        print(f"   ‚ùå Erro ao ler Procfile: {e}")
        todos_presentes = False
    
    # Requirements.txt
    try:
        with open('requirements.txt', 'r') as f:
            requirements = f.read()
        deps_essenciais = ['requests', 'flask', 'python-dotenv']
        for dep in deps_essenciais:
            if dep in requirements:
                print(f"   ‚úÖ requirements.txt - {dep} presente")
            else:
                print(f"   ‚ö†Ô∏è requirements.txt - {dep} n√£o encontrado")
    except Exception as e:
        print(f"   ‚ùå Erro ao ler requirements.txt: {e}")
    
    print()
    
    # Verificar novos arquivos da estrat√©gia de alavancagem
    print("üöÄ Verificando arquivos da estrat√©gia de alavancagem:")
    
    arquivos_alavancagem = [
        'backend/core/detector_alavancagem.py',
        'demonstracao_alavancagem.py',
        'ESTRATEGIA_ALAVANCAGEM.md',
        'ALAVANCAGEM_IMPLEMENTADA.md'
    ]
    
    for arquivo in arquivos_alavancagem:
        if os.path.exists(arquivo):
            print(f"   ‚úÖ {arquivo}")
        else:
            print(f"   ‚ö†Ô∏è {arquivo} - N√£o encontrado (pode ser opcional)")
    
    print()
    
    # Resultado final
    if todos_presentes:
        print("üéâ RESULTADO: PRONTO PARA DEPLOY!")
        print("‚úÖ Todos os arquivos obrigat√≥rios est√£o presentes")
        print("‚úÖ Sintaxe dos arquivos Python est√° correta")
        print("‚úÖ Configura√ß√µes do Railway est√£o OK")
        print()
        print("üì° COMANDOS PARA DEPLOY NO RAILWAY:")
        print("1. Commit das mudan√ßas:")
        print("   git add .")
        print('   git commit -m "feat: Implementa√ß√£o da estrat√©gia de alavancagem"')
        print("2. Push para o Railway:")
        print("   git push")
        print()
        print("üöÄ A estrat√©gia de alavancagem ser√° ativada automaticamente!")
        
    else:
        print("‚ùå RESULTADO: N√ÉO PRONTO PARA DEPLOY!")
        print("‚ö†Ô∏è Corrija os problemas listados acima antes do deploy")
    
    print()
    print("üí° DICA: O Railway automaticamente detectar√° as mudan√ßas")
    print("   e far√° o redeploy do bot com a nova estrat√©gia!")

if __name__ == "__main__":
    verificar_deploy_railway()
