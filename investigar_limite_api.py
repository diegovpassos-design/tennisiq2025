#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
AN√ÅLISE CR√çTICA: API 3600 REQ/HORA COM ERRO 429
===============================================
Se o limite real √© 3600/hora, por que estamos tendo 429 errors?
"""

def analisar_limite_real():
    """Analisa o problema real da API"""
    
    print("üö® === AN√ÅLISE CR√çTICA DO LIMITE REAL ===")
    print("=" * 60)
    
    limite_esperado = 3600  # Que voc√™ mencionou
    limite_codigo = 1800    # Que est√° no c√≥digo
    
    print(f"üîç DISCREP√ÇNCIA IDENTIFICADA:")
    print(f"  ‚Ä¢ Limite REAL da API: {limite_esperado} req/hora")
    print(f"  ‚Ä¢ Limite no C√ìDIGO: {limite_codigo} req/hora")
    print(f"  ‚Ä¢ Diferen√ßa: {limite_esperado - limite_codigo} req/hora ({((limite_esperado/limite_codigo)-1)*100:.0f}% maior)")
    
    print(f"\nüö® CONSEQU√äNCIAS:")
    print(f"  ‚ùå Rate limiter configurado para METADE do limite real")
    print(f"  ‚ùå Sistema entra em 'modo cr√≠tico' muito cedo")
    print(f"  ‚ùå Desperd√≠cio de 50% da capacidade da API")
    
    return limite_esperado, limite_codigo

def recalcular_com_limite_correto():
    """Recalcula cen√°rios com limite correto"""
    
    print(f"\nüìä === REC√ÅLCULO COM LIMITE CORRETO ===")
    print("=" * 60)
    
    limite_real = 3600
    req_por_ciclo = 15  # Estimativa m√©dia
    
    cenarios_tempo = {
        55: "Normal",
        65: "Moderado", 
        75: "Alto",
        90: "Cr√≠tico"
    }
    
    print("üî¢ CEN√ÅRIOS COM LIMITE CORRETO (3600 req/hora):")
    
    for tempo, nome in cenarios_tempo.items():
        ciclos_hora = 3600 / tempo
        req_hora = req_por_ciclo * ciclos_hora
        percentual = (req_hora / limite_real) * 100
        
        if percentual < 30:
            status = "‚úÖ MUITO SEGURO"
        elif percentual < 50:
            status = "‚úÖ SEGURO"
        elif percentual < 70:
            status = "üü° MODERADO"
        elif percentual < 85:
            status = "‚ö†Ô∏è ALTO"
        else:
            status = "üö® CR√çTICO"
        
        print(f"  {status} {nome}: {tempo}s ‚Üí {ciclos_hora:.1f} ciclos ‚Üí {req_hora:.0f} req/hora ({percentual:.1f}%)")

def identificar_causa_real():
    """Identifica a causa real dos erros 429"""
    
    print(f"\nüîç === POSS√çVEIS CAUSAS REAIS ===")
    print("=" * 60)
    
    causas = {
        "limite_por_minuto": {
            "desc": "Limite por minuto (n√£o por hora)",
            "calculo": "3600/hora = 60/minuto",
            "problematico": "Picos de requisi√ß√µes em poucos segundos"
        },
        "multiplas_instancias": {
            "desc": "M√∫ltiplas inst√¢ncias do bot rodando",
            "calculo": "2 inst√¢ncias √ó 1800 req/hora = 3600",
            "problematico": "Compartilhando o mesmo limite"
        },
        "rate_limit_sliding": {
            "desc": "Janela deslizante (n√£o hora fixa)",
            "calculo": "√öltimos 60 minutos, n√£o hora corrente",
            "problematico": "Ac√∫mulo das requisi√ß√µes passadas"
        },
        "requisicoes_extras": {
            "desc": "Outras aplica√ß√µes usando a mesma chave",
            "calculo": "Bot + outros servi√ßos = limite compartilhado",
            "problematico": "Competi√ß√£o pela mesma quota"
        },
        "bursts_requisicoes": {
            "desc": "Rajadas de requisi√ß√µes simult√¢neas",
            "calculo": "10 req em 1 segundo vs distribu√≠das",
            "problematico": "Rate limiter da API muito sens√≠vel"
        }
    }
    
    print("üö® CAUSAS PROV√ÅVEIS:")
    for causa, dados in causas.items():
        print(f"\nüî∏ {dados['desc'].upper()}:")
        print(f"    ‚Ä¢ C√°lculo: {dados['calculo']}")
        print(f"    ‚Ä¢ Problema: {dados['problematico']}")

def investigar_logs_railway():
    """Investiga padr√µes nos logs do Railway"""
    
    print(f"\nüîç === INVESTIGA√á√ÉO DOS LOGS ===")
    print("=" * 60)
    
    # Padr√µes observados nos logs
    observacoes = [
        "Erro 429 em ciclos consecutivos (13-15)",
        "53 requests mostrado no contador",
        "Pr√≥ximo ciclo: 45s (n√£o os tempos novos)",
        "Erro na primeira requisi√ß√£o do ciclo"
    ]
    
    print("üìã PADR√ïES OBSERVADOS:")
    for obs in observacoes:
        print(f"  ‚Ä¢ {obs}")
    
    print(f"\nüí° HIP√ìTESES:")
    print(f"  1. üîÑ Deploy ainda n√£o aplicado (ainda usando 45s)")
    print(f"  2. ‚è±Ô∏è Rate limit por MINUTO, n√£o por hora")
    print(f"  3. üåê M√∫ltiplas inst√¢ncias compartilhando limite")
    print(f"  4. üìä Contador de requests incorreto/defasado")

def solucoes_imediatas():
    """Prop√µe solu√ß√µes imediatas"""
    
    print(f"\nüõ†Ô∏è === SOLU√á√ïES IMEDIATAS ===")
    print("=" * 60)
    
    solucoes = {
        "atualizar_limite": {
            "desc": "Corrigir limite no c√≥digo para 3600",
            "arquivo": "rate_limiter.py, bot.py",
            "urgencia": "CR√çTICA"
        },
        "verificar_instancias": {
            "desc": "Verificar se h√° m√∫ltiplas inst√¢ncias rodando",
            "arquivo": "Railway dashboard",
            "urgencia": "ALTA"
        },
        "implementar_burst_control": {
            "desc": "Controle de rajadas (max 5 req/10s)",
            "arquivo": "rate_limiter.py",
            "urgencia": "ALTA"
        },
        "monitorar_real_time": {
            "desc": "Log de cada requisi√ß√£o com timestamp",
            "arquivo": "bot.py",
            "urgencia": "M√âDIA"
        }
    }
    
    print("üéØ A√á√ïES PRIORIT√ÅRIAS:")
    for i, (nome, dados) in enumerate(solucoes.items(), 1):
        print(f"\n{i}. {dados['desc'].upper()} ({dados['urgencia']})")
        print(f"    üìÅ Arquivo: {dados['arquivo']}")

def main():
    """An√°lise completa"""
    
    print("üö® INVESTIGA√á√ÉO: POR QUE 429 COM LIMITE 3600?")
    print("=" * 70)
    
    analisar_limite_real()
    recalcular_com_limite_correto()
    identificar_causa_real()
    investigar_logs_railway()
    solucoes_imediatas()
    
    print(f"\n" + "=" * 70)
    print("üí° CONCLUS√ÉO PRELIMINAR:")
    print("‚ùå C√≥digo configurado para 1800 req/hora (50% do limite real)")
    print("‚ùå Poss√≠vel limite por MINUTO ou m√∫ltiplas inst√¢ncias")
    print("‚úÖ A√á√ÉO: Corrigir limite para 3600 + investigar Railway")

if __name__ == "__main__":
    main()
